#include <array>

#include "shortestPath.h"



// vector< tuple<int, int, int> >


int main(int argc, char** argv)
{
	graph G1(100, 0.579, 33), G2(50, 0.72, 10), G3(50, 0.4, 10);
	graph G4(35, 0.64, 18), G5(187), OG;
	graph G6( vector<int>{1,2,3,4,5,6,7,8,9} );
	graph G7( vectOfTuples{ intTup{1, 5, 4}, intTup{1, 2, 9}, intTup{1, 3, 2},
							intTup{2, 3, 7}, intTup{2, 5, 4}, intTup{2, 6, 5},
							intTup{3, 4, 3},
							intTup{4, 6, 9}, intTup{4, 8, 3},
							intTup{5, 6, 3}, intTup{5, 7, 3},
							intTup{6, 7, 6}, intTup{6, 8, 9},
							intTup{7, 9, 6},
							intTup{8, 9, 11},
							intTup{10, 11, 17} });
	
	cout << boolalpha;

// 	cout << "Neighbors of node 6 in G2:" << endl;
// 	
// 	for(auto& N: G2.getNeighbors(6) )
// 		cout << N << "\t";
// 	
// 	cout << endl;
// 	
	cout << "Neighbors of node 7 in G3:" << endl;
	
	for(auto& N: G3.getNeighbors(7) )
		cout << N << "\t";
	
	cout << endl;
// 	
// 	cout << "Neighbors of node 9 in G4:" << endl;
// 	
// 	for(auto& N: G4.getNeighbors(9) )
// 		cout << N << "\t";
// 	
// 	cout << endl;
// 	
	dsPath g3SP(G3);
	
	auto p7to29 = g3SP.getPath(7, 29);
	
	cout << "G3 path 7->29:\t";
	
	for(auto& N: p7to29)
		cout << N << '\t';
		
	cout << "\nG3 7->29 size: " << g3SP.getPathSize(7, 29) << endl;
	
	cout << G3.getEdgeValue(7, 29) << '\t' << G3.getEdgeValue(29, 7) << endl;
	

// 	G6.addEdge(1, 2, 8);
// 	
// 	cout << "G6 vertex edge value between 1 and 2: ";
// 	
// 	cout << G6.getEdgeValue(1, 2) << "\t" << G6.getEdgeValue(2, 1) << endl;
// 	
// 	cout << "G6 vertex count: " << G6.getVertexCount() << endl;
// 	
// 	dsPath g6SP(G6); auto p1to2 = g6SP.getPath(1, 2);
	
// 	cout << "G6 path 1->2:\t" << p1to2.front() << '\t' << p1to2.back();
// 	cout << "\tG6 path size 1->2:\t" << g6SP.getPathSize(1, 2) << endl;
	
	dsPath g7SP(G7);
	
	cout << "adjacent 5 & 2 in G7: " << G7.isAdjacent(5, 2) << '\t';
	cout << G7.getEdgeValue(2, 5) << '\t' << G7.getEdgeValue(5, 2) << endl;
	
	vector<int> p3to8{-5};
	
	//if ( G7.isAdjacent(3, 8) )
	p3to8 = g7SP.getPath(11, 10);
	
	cout << "G7 path 3->9:\t";
	
	for(auto& N: p3to8)
		cout << N << '\t';
		
	cout << "\nG7 size: " << g7SP.getPathSize(11, 10) << endl;
// 	
// 	priorityQueue pq1;
// 	
// 	//int nums[] = {8, 9, 5, 3, 1, 6};
// 	
// 	array<int,6> nums{8, 9, 5, 3, 1, 6};
// 	
// 	for(auto& n: nums)
// 		pq1.insert( nodePath(n, vector<int>{1,2}) );
// 			
// 	cout << "root: " << pq1.top().edgeCountTotal << "\tsize: " << pq1.getSize();
// 	cout << "\tfront: " << pq1.getMin().nodeList.front();
// 	cout << endl;
// 	
// 	for( auto& E: pq1.getQueContents() )
// 		cout << E.edgeCountTotal << "\t";
// 	
// 	cout << endl;
	
	return 0;
}